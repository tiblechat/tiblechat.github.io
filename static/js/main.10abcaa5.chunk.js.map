{"version":3,"sources":["images/Ethereum_logo_2014.svg","images/dtube.png","used/getWeb3.js","unused/Navbar.js","App.js","used/Mainpage.js","used/Menu.js","used/Connect.js","used/NavbarSimple.js","used/Proposals.js","used/Admin.js","used/NewProposal.js","used/DisplayProposal.js","used/MainpageSelector.js","used/Main.js","serviceWorker.js","index.js"],"names":["module","exports","getWeb3Async","a","window","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","result","getWeb3Click","NavbarUnused","className","id","this","props","account","Component","Mainpage","componentDidMount","proposalTxt","IsCounted","statusTxt","connectStatus","currentStep","proposals","description","voteCount","class","Menu","render","href","onClick","handleClick","bind","linkNumber","onLinkClicked","React","Connect","onConnect","Button","blockchain","amount","NavbarSimple","handleConnect","Brand","alt","src","img","width","height","Nav","Proposals","handleClickButton","handleClickText","onPageChangedClicked","index","listDisplayed","map","propo","key","col2","isProposal","length","style","display","justifyContent","text-white","bg-primary","Admin","state","steps","title","onClickNext","onAuthorize","onWhitelistButton","address","onNextStepButton","Card","Header","Body","activeStep","background","padding","textAlign","margin","marginTop","Form","Group","controlId","Control","type","ref","input","variant","ListGroup","Item","Table","striped","bordered","hover","whitelist","NewProposal","value","hasError","handleChange","error","info","setState","event","target","onRegisterProposal","onChange","rows","DisplayProposal","proposalId","onVote","proposalVoteCount","undefined","MainpageSelector","propNumber","curPage","winningId","onNextStep","onWhitelist","curProposal","Main","loadWeb3","eth","getAccounts","accounts","currentProvider","net","getId","networkId","deployedNetwork","VotingContract","networks","instance","Contract","abi","getBalance","bal","chainname","balEther","utils","fromWei","currentAccount","toString","currentAmount","currentBlockchain","theweb3","theaccounts","thecontract","runInit","on","accountChanged","chainId","reload","alert","localStorage","setItem","contract","methods","getAdresses","call","getStatus","status","getProposals","theWinningId","stepInt","parseInt","GetWinningProposalId","theproposals","thewhitelist","registerProposalTransaction","proposalDescription","registerProposal","send","from","currentpage","nextStepTransaction","isOwner","isowner","nextStep","startProposalsRegistration","endProposalsRegistration","startVotingSession","endVotingSession","CountVotes","VoteTransaction","Vote","addressFromForm","register","handleLinkClicked","proposalNumber","currentProposal","page","getItem","isNaN","proposal","connectstatus","location","newaccounts","Boolean","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.10abcaa5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Ethereum_logo_2014.fb666fbb.svg\";","module.exports = __webpack_public_path__ + \"static/media/dtube.a89a5c8c.png\";","import Web3 from \"web3\";\r\n\r\nconst getWeb3 = () =>\r\n  new Promise((resolve, reject) => {\r\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\r\n    window.addEventListener(\"load\", async () => {\r\n      // Modern dapp browsers...\r\n      if (window.ethereum) {\r\n        const web3 = new Web3(window.ethereum);\r\n        try {\r\n          // Request account access if needed\r\n          await window.ethereum.enable();\r\n          // Accounts now exposed\r\n          resolve(web3);\r\n        } catch (error) {\r\n          reject(error);\r\n        }\r\n      }\r\n      // Legacy dapp browsers...\r\n      else if (window.web3) {\r\n        // Use Mist/MetaMask's provider.\r\n        const web3 = window.web3;\r\n        console.log(\"Injected web3 detected.\");\r\n        resolve(web3);\r\n      }\r\n      // Fallback to localhost; use dev console port by default...\r\n      else {\r\n        const provider = new Web3.providers.HttpProvider(\r\n          \"http://127.0.0.1:8545\"\r\n        );\r\n        const web3 = new Web3(provider);\r\n        console.log(\"No web3 instance injected, using Local web3.\");\r\n        resolve(web3);\r\n      }\r\n    });\r\n  });\r\n\r\n\r\n \r\n  async function getWeb3Async() \r\n  {\r\n   \r\n      // Modern dapp browsers...\r\n      if (window.ethereum) {\r\n        const web3 = new Web3(window.ethereum);\r\n        try {\r\n          // Request account access if needed\r\n          await window.ethereum.enable();\r\n          // Accounts now exposed\r\n          \r\n\r\n        } catch (error) {\r\n          console.log(\"ERROR\");\r\n   \r\n        }\r\n        return web3;\r\n      }\r\n      // Legacy dapp browsers...\r\n      else if (window.web3) {\r\n        // Use Mist/MetaMask's provider.\r\n        const web3 = window.web3;\r\n        console.log(\"Injected web3 detected.\");\r\n        return web3;\r\n\r\n      }\r\n      // Fallback to localhost; use dev console port by default...\r\n      else {\r\n        const provider = new Web3.providers.HttpProvider(\r\n          \"http://127.0.0.1:8545\"\r\n        );\r\n        const web3 = new Web3(provider);\r\n        console.log(\"No web3 instance injected, using Local web3.\");\r\n        return web3;\r\n       \r\n      }\r\n\r\n\r\n  }\r\n\r\n  async function getWeb3Click() {\r\n   \r\n    const result = await getWeb3Async();\r\n    return result;\r\n  }\r\n  \r\n\r\n//export default getWeb3;\r\nexport default getWeb3Click;\r\n","import React, { Component } from \"react\";\r\n//import Identicon from \"identicon.js\"; //user profile\r\nimport dtube from \"../images/dtube.png\"; //logo\r\n\r\nclass NavbarUnused extends Component {\r\n  render() {\r\n    return (\r\n      <nav className=\"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow text-monospace\">\r\n        {/* <a\r\n          className=\"navbar-brand ml-1 col-sm-3 col-md-2 mr-0\"\r\n          href=\"/\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          <img\r\n            src={dtube}\r\n            width=\"30\"\r\n            height=\"30\"\r\n            className=\"d-inline-block align-top\"\r\n            alt=\"DTube logo\"\r\n          />\r\n          &nbsp;Voting Dapp\r\n        </a> */}\r\n        <small className=\"text-secondary\">\r\n              <small id=\"account\">{this.props.account}</small>\r\n            </small>\r\n        {/* <ul className=\"navbar-nav px-3\">\r\n          <li className=\"nav-item text-nowrap h5 d-none d-sm-none d-sm-block\">\r\n            <small className=\"text-secondary\">\r\n              <small id=\"account\">{this.props.account}</small>\r\n            </small>\r\n            {this.props.account ? (\r\n            //   <img\r\n            //     className=\"ml-2\"\r\n            //     width=\"30\"\r\n            //     height=\"30\"\r\n            //     src={`data:image/png;base64,${new Identicon(\r\n            //       this.props.account,\r\n            //       30\r\n            //     ).toString()}`}\r\n            //     alt=\"voting app account address\"\r\n            //   />\r\n            <img\r\n            className=\"ml-2\"\r\n            width=\"30\"\r\n            height=\"30\"\r\n            src={dtube}\r\n            alt=\"voting app account address\"\r\n          />\r\n            ) : (\r\n              <span></span>\r\n            )}\r\n          </li>\r\n        </ul> */}\r\n      </nav>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NavbarUnused;","\r\nimport React, { Component } from \"react\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Card from 'react-bootstrap/Card';\r\nimport ListGroup from 'react-bootstrap/ListGroup';\r\nimport Table from 'react-bootstrap/Table';\r\nimport VotingContract from \"./contracts/Voting.json\";\r\nimport getWeb3 from \"./used/getWeb3\";\r\nimport NavbarUnused from \"./unused/Navbar\";\r\n//import \"./App.css\";\r\n\r\nclass App extends Component {\r\n  //state = { whitelist: [], web3: null, accounts: null, contract: null,testum:0 };\r\n\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state =  { whitelist: [], web3: null, accounts: null, contract: null,testum:0 };\r\n    this.runInit=this.runInit.bind(this);\r\n    this.accountChanged=this.accountChanged.bind(this);\r\n  }\r\n\r\n  componentDidMount = async () => {\r\n    try {\r\n      // Get network provider and web3 instance.\r\n      const web3 = await getWeb3();\r\n\r\n      // Use web3 to get the user's accounts.\r\n      const accounts = await web3.eth.getAccounts();\r\n\r\n    \r\n      const networkId = await web3.eth.net.getId();\r\n      console.log(\"network id is: \"+networkId);\r\n      const deployedNetwork = VotingContract.networks[networkId];\r\n      const instance = new web3.eth.Contract(\r\n        VotingContract.abi,\r\n        deployedNetwork && deployedNetwork.address,\r\n      );\r\n\r\n      // Set web3, accounts, and contract to the state, and then proceed with an\r\n      // example of interacting with the contract's methods.\r\n      this.setState({ web3, accounts, contract: instance }, this.runInit);\r\n\r\n      // detect Metamask account change\r\n      // note: not sure this is a good pattern to do it in that component...\r\n      // window.ethereum.on('accountsChanged', function (newaccounts) \r\n      // {\r\n      //   console.log('accountsChanges',newaccounts);\r\n      //   this.setState({accounts: newaccounts });\r\n      // });\r\n      window.ethereum.on('accountsChanged', (accounts) => {\r\n        this.accountChanged(accounts);\r\n      });\r\n\r\n      window.ethereum.on('chainChanged', (chainId) => {\r\n        // Handle the new chain.\r\n        // Correctly handling chain changes can be complicated.\r\n        // We recommend reloading the page unless you have good reason not to.\r\n        console.log(\"chain id is: \"+chainId);\r\n        //const networkId2 = await web3.eth.net.getId();\r\n        //console.log(\"network id is: \"+networkId2);\r\n        window.location.reload();\r\n      });\r\n\r\n\r\n    } \r\n    catch (error) {\r\n      // Catch any errors for any of the above operations.\r\n      alert(\r\n        `Failed to load web3, accounts, or contract. Check console for details.`,\r\n      );\r\n      console.error(error);\r\n    }\r\n  };\r\n  accountChanged(newaccounts)\r\n  {\r\n    console.log('accountsChanges',newaccounts);\r\n    this.setState({accounts: newaccounts });\r\n  }\r\n\r\n  runInit = async() => {\r\n    const { accounts, contract } = this.state;\r\n  \r\n    // récupérer la liste des comptes autorisés\r\n    const whitelist = await contract.methods.getAdresses().call();\r\n    console.log(\"from contract \"+whitelist);\r\n    // Mettre à jour le state \r\n    this.setState({ whitelist: whitelist });\r\n    this.setState({ testum: 5 });\r\n    //const { wl } = this.state.whitelist;\r\n    console.log(\"from state 1 \"+this.state.whitelist);\r\n    console.log(\"accounts \"+this.state.accounts);\r\n  };\r\n\r\n  whitelist = async () => {\r\n    const { accounts, contract } = this.state;\r\n    const address = this.address.value;\r\n\r\n    const isowner = await contract.methods.isOwner().call({ from: accounts[0] });\r\n\r\n    if (isowner) {\r\n      try {\r\n        // Interaction avec le smart contract pour ajouter un compte \r\n        await contract.methods.register(address).send({ from: accounts[0] });\r\n        // Récupérer la liste des comptes autorisés\r\n        this.runInit();\r\n      }\r\n      catch (error) {\r\n        console.log(\"ca marche pas\");\r\n      }\r\n    }\r\n    else {\r\n      console.log(\"not auhorized to this action\")\r\n    }\r\n  }\r\n\r\n\r\n  startRegistration = async () => {\r\n    const { accounts, contract } = this.state;\r\n   \r\n    const isowner = await contract.methods.isOwner().call({ from: accounts[0] });\r\n\r\n    if (isowner) {\r\n      try {\r\n        // Interaction avec le smart contract pour ajouter un compte \r\n        await contract.methods.startProposalsRegistration().send({ from: accounts[0] });\r\n    \r\n      }\r\n      catch (error) {\r\n        console.log(\"ca marche pas\");\r\n      }\r\n    }\r\n    else {\r\n      console.log(\"not auhorized to this action\")\r\n    }\r\n  }\r\n\r\n\r\n  render() {\r\n   // const { wl } = this.state.whitelist;\r\n   // console.log(\"from state 2 \"+wl);\r\n  // const { toto } = this.state.testum;\r\n  // console.log(\"from state 2 \"+toto);\r\n    if (!this.state.web3) {\r\n      return <div>Loading Web3, accounts, and contract...</div>;\r\n    }\r\n    return (\r\n    <div className=\"App\">\r\n        <NavbarUnused account={this.state.accounts[0]} />\r\n         <div>\r\n       <h2 className=\"text-center\">Système d'une liste blanche</h2>\r\n       <hr></hr>\r\n       <br></br>\r\n     </div>\r\n     <div style={{ display: 'flex', justifyContent: 'center' }}>\r\n       <Card style={{ width: '50rem' }}>\r\n         <Card.Header><strong>Liste des comptes autorisés</strong></Card.Header>\r\n         <Card.Body>\r\n           <ListGroup variant=\"flush\">\r\n             <ListGroup.Item>\r\n               <Table striped bordered hover>\r\n                 <thead>\r\n                   <tr>\r\n                     <th>@</th>\r\n                   </tr>\r\n                 </thead>\r\n                 <tbody>\r\n                   {\r\n                     this.state.whitelist !== null &&this.state.whitelist.map((a) => <tr><td>{a}</td></tr>)\r\n                   }\r\n                 </tbody>\r\n               </Table>\r\n             </ListGroup.Item>\r\n           </ListGroup>\r\n         </Card.Body>\r\n       </Card>\r\n     </div>\r\n     <br></br>\r\n     <div style={{ display: 'flex', justifyContent: 'center' }}>\r\n       <Card style={{ width: '50rem' }}>\r\n         <Card.Header><strong>Autoriser un nouveau compte</strong></Card.Header>\r\n         <Card.Body>\r\n           <Form.Group controlId=\"formAddress\">\r\n             <Form.Control type=\"text\" id=\"address\"\r\n               ref={(input) => { this.address = input }}\r\n             />\r\n           </Form.Group>\r\n           <Button onClick={this.whitelist} variant=\"dark\" > Autoriser </Button>\r\n\r\n           <Button onClick={this.startRegistration} variant=\"dark\" > Start proposal registration </Button>\r\n         </Card.Body>\r\n       </Card>\r\n        </div>\r\n         <br></br>\r\n    </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","\r\nimport React, { Component } from \"react\";\r\n\r\n// display current status\r\n// if (props.votestallied)\r\n//  display winning proposal and nb votes\r\n// else\r\n\r\nclass Mainpage extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n    }\r\n\r\n    componentDidMount = async () => {\r\n\r\n    };\r\n\r\n\r\n    render() {\r\n        var proposalTxt = '';\r\n        var proposalVoteCount = 0;\r\n        var IsCounted = false;\r\n\r\n        var statusTxt = \"\";// = \"Current status: \";\r\n\r\n        if (this.props.connectStatus != 1)\r\n        {\r\n            statusTxt += \"Not connected\";\r\n        }\r\n        else\r\n        {\r\n        if (this.props.currentStep === 0)\r\n        {\r\n            statusTxt += \"whitelisting\";\r\n        }\r\n        else if (this.props.currentStep === 1)\r\n        {\r\n            statusTxt += 'Start proposal registration';\r\n        }\r\n        else if (this.props.currentStep === 2)\r\n        {\r\n            statusTxt += 'End proposal registration';\r\n        }\r\n        else if (this.props.currentStep === 3)\r\n        {\r\n            statusTxt += 'Start voting';\r\n        }\r\n        else if (this.props.currentStep === 4)\r\n        {\r\n            statusTxt += 'End voting';\r\n        }\r\n        // else if (this.props.currentStep === 5)\r\n        // {\r\n        //     statusTxt = 'Count votes';\r\n           \r\n        // }\r\n        else if (this.props.currentStep === 5)\r\n        {\r\n            statusTxt += 'Votes counted';\r\n            // console.log(this.props.proposals);\r\n            // console.log(this.props.winningId);\r\n            // proposalTxt = this.props.proposals[this.props.winningId].description;\r\n            // proposalVoteCount = this.props.proposals[this.props.winningId].voteCount;\r\n            // DBG\r\n            proposalTxt = this.props.proposals[0].description;\r\n            proposalVoteCount = this.props.proposals[0].voteCount;\r\n            IsCounted = true;\r\n        }\r\n    }\r\n\r\n        if (IsCounted) return (\r\n            <div class=\"card text-white bg-success text-center\">\r\n                <div class=\"card-body\">\r\n                <div class=\"card-header\">\r\n   Winning proposal\r\n  </div>\r\n                    <p class=\"card-text\">{proposalTxt}</p>\r\n                    {/* <p class=\"card-text\">{proposalVoteCount}</p> */}\r\n                </div>\r\n            </div>\r\n        );\r\n        else\r\n        return (\r\n            <div class=\"card text-white bg-primary text-center\">\r\n                <div class=\"card-body\">\r\n                <div class=\"card-header\">\r\n   Status\r\n  </div>\r\n                    <p class=\"card-text\">{statusTxt}</p>\r\n                </div>\r\n            </div>\r\n        );;\r\n    }\r\n}\r\n\r\nexport default Mainpage;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\n//import \"./styles.css\";\r\nclass Menu extends React.Component {\r\n    //state = { active: !this.props.open || true };\r\n\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        // When defining custom methods on our React component classes, we must perform the\r\n        // binding pattern inside constructor() so that this references our component.\r\n        // this is defined in react functions like render, componentDidMount, etc... but if we want to access it from a custom method, this is needed\r\n        this.handleClick = this.handleClick.bind(this);\r\n    }\r\n\r\n    handleClick(linkNumber) {\r\n        //e.preventDefault();\r\n        console.log(linkNumber);\r\n        this.props.onLinkClicked(linkNumber,-1);\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    render = () => {\r\n        // const { open } = this.props;\r\n        // const active = !open;\r\n\r\n        return (\r\n            // <div id=\"wrapper\" className=\"toggled\">\r\n            // <div>\r\n            //     {/* <div id=\"sidebar-wrapper\"> */}\r\n            //     <div>\r\n            //         {/* <ul className=\"sidebar-nav\"> */}\r\n            //         <ul>\r\n            //             {/* <li className=\"sidebar-brand\"> */}\r\n            //             <li>\r\n            //                 {\" \"}\r\n            //                 <a href=\"#\" onClick={() => this.handleClick(0)}> Home </a>{\" \"}\r\n            //             </li>\r\n            //             <li>\r\n            //                 {\" \"}\r\n            //                 <a href=\"#\" onClick={() => this.handleClick(1)}>Proposals</a>{\" \"}\r\n            //             </li>\r\n            //             <li>\r\n            //                 {\" \"}\r\n            //                 <a href=\"#\" onClick={() => this.handleClick(2)}>Admin</a>{\" \"}\r\n            //             </li>\r\n\r\n            //         </ul>\r\n            //     </div>\r\n            // </div>\r\n           \r\n            <div class=\"d-flex flex-column align-items-center align-items-sm-start px-3 pt-2 text-white min-vh-100\">\r\n                <a href=\"/\" class=\"d-flex align-items-center pb-3 mb-md-0 me-md-auto text-white text-decoration-none\">\r\n                    <span class=\"fs-5 d-none d-sm-inline\">Menu</span>\r\n                </a>\r\n                <ul class=\"nav nav-pills nav-fill flex-column mb-sm-auto mb-0 align-items-center align-items-sm-start\" id=\"menu\">\r\n                   \r\n     \r\n                <li class=\"nav-item\">\r\n                        <a href=\"#\"  onClick={() => this.handleClick(0)} class=\"nav-link px-0 align-middle text-white\">\r\n                            <i class=\"fs-4 bi-table\"></i> <span class=\"ms-1 d-none d-sm-inline\">Home</span></a>\r\n                    </li>\r\n                    <li class=\"nav-item\">\r\n                        <a href=\"#\" onClick={() => this.handleClick(1)} class=\"nav-link px-0 align-middle text-white\">\r\n                            <i class=\"fs-4 bi-table\"></i> <span class=\"ms-1 d-none d-sm-inline\">Proposals</span></a>\r\n                    </li>\r\n                    <li class=\"nav-item\">\r\n                        <a href=\"#\" onClick={() => this.handleClick(2)} class=\"nav-link px-0 align-middle text-white\">\r\n                            <i class=\"fs-4 bi-table\"></i> <span class=\"ms-1 d-none d-sm-inline\">Admin</span></a>\r\n                    </li>\r\n\r\n                </ul>\r\n               \r\n               \r\n            </div>\r\n        \r\n        );\r\n    };\r\n}\r\n\r\nexport default Menu;\r\n","\r\nimport React, { Component } from \"react\";\r\nimport { Button } from 'react-bootstrap';\r\n\r\n// component that displays: \r\n// bouton connect\r\n// ou\r\n// amount + account + blockchain\r\n// ou \r\n// \"bad network change to XXX\"\r\n// TODO: display account, blockchain\r\n// TODO: gerer le mauvais network\r\nclass Connect extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleClick = this.handleClick.bind(this);\r\n\r\n    }\r\n\r\n    componentDidMount = async () => {\r\n\r\n\r\n    };\r\n\r\n    handleClick() {\r\n        this.props.onConnect();\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n\r\n\r\n        if (this.props.connectStatus === 0) {\r\n            // NOT CONNECTED\r\n            return (\r\n                <Button onClick={() => this.handleClick()}>Connect</Button>\r\n            );\r\n\r\n        }\r\n        else if (this.props.connectStatus === 1) {\r\n            // CONNECTED\r\n            return ( \r\n                <div class=\"container-fluid\">\r\n                 <ul class=\"nav navbar-nav navbar-right\">\r\n      {/* <li><a class=\"nav-link\" href=\"#\">Sign Up</a></li>\r\n      <li><a class=\"nav-link\" href=\"#\">Login</a></li> */}\r\n      <li><a class=\"nav-link maclasstextcolorwhite\">{this.props.blockchain}</a></li>\r\n      <li><a class=\"nav-link maclasstextcolorwhite\">{this.props.amount+ \" ETH\"}</a></li>\r\n      <li><a class=\"nav-link maclasstextcolorwhite\">{this.props.account}</a></li>\r\n\r\n\r\n    </ul>\r\n\r\n                    {/* <div class=\"row\">\r\n                        <div class=\"col\">\r\n                        \r\n                            <div class=\"card h-50\">\r\n                                <div class=\"card-body\">\r\n\r\n\r\n                                    <p >{this.props.blockchain}</p>\r\n                                </div>\r\n                              \r\n                            </div>\r\n                        </div>\r\n                        <div class=\"col\">\r\n                            <div class=\"card h-50\">\r\n                                <div class=\"card-body\">\r\n\r\n\r\n                                <p >{this.props.amount+ \" ETH\"} </p>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"col\">\r\n                            <div class=\"card h-50\">\r\n                                <div class=\"card-body\">\r\n\r\n\r\n                                <p >{this.props.account}</p>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div> */}\r\n                </div>\r\n\r\n            );\r\n\r\n        }\r\n        else if (this.props.connectStatus === 2) {\r\n            // CONNECTION ISSUE\r\n            return (\r\n                <h3 class=\"px-0 align-middle text-white\">invalid network</h3>\r\n            );\r\n\r\n        }\r\n        else {\r\n            // CONNECTION ISSUE\r\n            return (\r\n                <h3 class=\"px-0 align-middle text-white\">invalid network</h3>\r\n            );\r\n\r\n        }\r\n\r\n\r\n\r\n\r\n\r\n\r\n    }\r\n}\r\n\r\nexport default Connect;\r\n","import React, { Component } from \"react\";\r\n\r\nimport { Button, Navbar, Nav, NavItem, NavDropdown, MenuItem, Container } from 'react-bootstrap';\r\nimport Connect from \"./Connect\";\r\n//import img from \"./images/dtube.png\"; //OK\r\nimport img from \"../images/Ethereum_logo_2014.svg\"; //OK\r\n\r\n\r\n\r\n\r\n\r\nclass NavbarSimple extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleConnect = this.handleConnect.bind(this);\r\n\r\n  }\r\n\r\n  componentDidMount = async () => {\r\n\r\n\r\n  };\r\n\r\n  handleConnect() {\r\n    this.props.onConnect();\r\n  }\r\n\r\n\r\n\r\n  render() {\r\n\r\n    return (\r\n      <Navbar >\r\n        <Navbar.Brand href=\"#home\" className=\"ml-auto\">\r\n          <img\r\n            alt=\"\"\r\n            // src=\"/images/Ethereum_logo_2014.svg\"\r\n            src={img}\r\n            width=\"30\"\r\n            height=\"30\"\r\n            className=\"d-inline-block align-top\"\r\n          />{' '}\r\n          Voting app\r\n        </Navbar.Brand>\r\n        <Nav className=\"ms-auto\">\r\n          <Connect onConnect={this.handleConnect}\r\n            connectStatus={this.props.connectStatus}\r\n            account={this.props.account}\r\n            blockchain={this.props.blockchain}\r\n            amount={this.props.amount} /></Nav>\r\n\r\n      </Navbar>\r\n    );\r\n\r\n  }\r\n\r\n}\r\n\r\nexport default NavbarSimple;","\r\nimport React, { Component } from \"react\";\r\nimport Card from 'react-bootstrap/Card'\r\nimport { Button, ListGroup, Form, Table, Container, Row, Col } from 'react-bootstrap';\r\nimport \"./Proposals.css\";\r\n\r\n\r\nclass Proposals extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.handleClickButton = this.handleClickButton.bind(this);\r\n        this.handleClickText = this.handleClickText.bind(this);\r\n    }\r\n\r\n    handleClickButton() {\r\n\r\n       \r\n        this.props.onPageChangedClicked(3,-1);\r\n    }\r\n\r\n    handleClickText(index) {\r\n       \r\n        this.props.onPageChangedClicked(4,index);\r\n    }\r\n\r\n    componentDidMount = async () => {\r\n\r\n    };\r\n\r\n    // {people.map((person, index) => (\r\n    //     <p key={index}>{person.name}</p>\r\n    //   ))}\r\n    render() {\r\n        var listDisplayed;\r\n        if (typeof this.props.proposals !== 'undefined') {\r\n\r\n\r\n            listDisplayed = (this.props.proposals.map((propo, index) =>\r\n            (\r\n                // <p key={index}>{person.name}</p>\r\n                <li key={index} class=\"list-group-item\">\r\n\r\n                    <div class=\"card\" onClick={() => this.handleClickText(index)}>\r\n                        <div class=\"card-body\">\r\n                            {/* <h4 class=\"card-title\">TODO</h4> */}\r\n                            <p class=\"card-text\">{propo.description}</p>\r\n                            <a href=\"#\" class=\"card-link\">Go to proposal</a>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"card\">\r\n                        <div class=\"card-body\">\r\n                            <p class=\"card-text\">{\"Vote count: \"+propo.voteCount}</p>\r\n                        </div>\r\n                    </div>\r\n\r\n\r\n                </li>\r\n            )\r\n            ))\r\n        } else {\r\n            listDisplayed = <h1>TODO</h1>;\r\n        }\r\n\r\n\r\n        var isProposal = false;\r\n        if (this.props.proposals.length > 0)\r\n        {\r\n            isProposal = true;\r\n        }\r\n\r\n\r\n        var col2;\r\n        \r\n        if (isProposal)\r\n        {\r\n            col2 =                      <div class=\"col-sm-9\"> <div style={{ display: 'flex', justifyContent: 'center' }}>\r\n\r\n            <div class=\"w-100\">\r\n                <ul class=\"list-group\">\r\n\r\n                    {listDisplayed}\r\n\r\n\r\n              \r\n\r\n\r\n\r\n\r\n                </ul>\r\n            </div>\r\n\r\n        </div></div>;\r\n        }\r\n\r\n        return (\r\n            <div className=\"Proposals\">\r\n\r\n                <div class=\"container\">\r\n                    <div class=\"row\">\r\n                        <div style={{ display: 'flex', justifyContent: 'center' }}>\r\n                            <h1 class=\"px-0 align-middle text-white\">Proposals</h1>\r\n                        </div>\r\n                    </div>\r\n                  \r\n                    <div class=\"row\">\r\n                        <div class=\"col-sm-3\">\r\n                            <div style={{ display: 'flex', justifyContent: 'center' }}>\r\n                                <div class=\"container p-5 my-5\">\r\n                                    <div style={{ display: 'flex', justifyContent: 'center' }}>\r\n                                        <Button onClick={() => this.handleClickButton()} text-white bg-primary>New proposal</Button>\r\n                                    </div>\r\n                                </div>\r\n                            </div></div>\r\n   \r\n                  \r\n                \r\n{col2}\r\n\r\n                {/* <Container>\r\n                    <Row>\r\n                        <Col>\r\n                            <div style={{ display: 'flex', justifyContent: 'center' }}>\r\n                                <br></br>\r\n                                <Card style={{ width: '20rem' }}>\r\n\r\n                                    <Card.Body>\r\n\r\n                                        <Button onClick={() => this.handleClickButton()} variant=\"dark\" > Add new </Button>\r\n\r\n\r\n                                    </Card.Body>\r\n                                </Card>\r\n                            </div>\r\n                        </Col>\r\n                        <Col>\r\n                            <div style={{ display: 'flex', justifyContent: 'center' }}>\r\n\r\n\r\n                                <ListGroup variant=\"flush\">\r\n                                    <ListGroup.Item>\r\n                                        <textarea onClick={() => this.handleClickText()}\r\n                                        className=\"form-control\"\r\n                                        id=\"exampleFormControlTextarea1\"\r\n                                        rows=\"5\"> salut ca va\r\n                                        </textarea>\r\n                                        </ListGroup.Item>\r\n                                    <ListGroup.Item>Proposition 2</ListGroup.Item>\r\n                                    <ListGroup.Item>Proposition 3</ListGroup.Item>\r\n                                </ListGroup>\r\n\r\n                            </div>\r\n                        </Col>\r\n\r\n                    </Row>\r\n                </Container> */}\r\n            </div>\r\n            </div>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default Proposals;\r\n","\r\nimport React, { Component } from \"react\";\r\n\r\nimport Card from 'react-bootstrap/Card'\r\nimport { Button, ListGroup, Form, Table } from 'react-bootstrap';\r\nimport Stepper from 'react-stepper-horizontal';\r\nclass Admin extends Component {\r\n\r\n    // TODO: move steps outside state if necessary\r\n\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            steps: [{\r\n                title: 'Start whitelisting',\r\n                // href: 'http://example1.com',\r\n                // onClick: (e) => {\r\n                //     e.preventDefault()\r\n                //     console.log('onClick', 1)\r\n                // }\r\n            }, {\r\n                title: 'Start proposal registration',\r\n                // href: 'http://example2.com',\r\n                // onClick: (e) => {\r\n                //     e.preventDefault()\r\n                //     console.log('onClick', 2)\r\n                // }\r\n            }, {\r\n                title: 'End proposal registration',\r\n                // href: 'http://example3.com',\r\n                // onClick: (e) => {\r\n                //     e.preventDefault()\r\n                //     console.log('onClick', 3)\r\n                // }\r\n            }, {\r\n                title: 'Start voting',\r\n                // href: 'http://example4.com',\r\n                // onClick: (e) => {\r\n                //     e.preventDefault()\r\n                //     console.log('onClick', 4)\r\n                // }\r\n            },\r\n            {\r\n                title: 'End voting',\r\n                // href: 'http://example4.com',\r\n                // onClick: (e) => {\r\n                //     e.preventDefault()\r\n                //     console.log('onClick', 4)\r\n                // }\r\n            },\r\n            {\r\n                title: 'Count votes',\r\n                // href: 'http://example4.com',\r\n                // onClick: (e) => {\r\n                //     e.preventDefault()\r\n                //     console.log('onClick', 4)\r\n                // }\r\n            }\r\n        \r\n        \r\n        ],\r\n            \r\n        };\r\n        this.onClickNext = this.onClickNext.bind(this);\r\n        this.onAuthorize = this.onAuthorize.bind(this);\r\n    }\r\n\r\n    onAuthorize() {\r\n     \r\n      this.props.onWhitelistButton(this.address);\r\n    }\r\n\r\n\r\n    onClickNext() {\r\n       \r\n        this.props.onNextStepButton();\r\n\r\n        // if transaction is ok, update state (maybe not the best pattern)\r\n\r\n        \r\n    }\r\n\r\n\r\n    componentDidMount = async () => {\r\n\r\n    };\r\n\r\n\r\n    render() {\r\n        const steps = this.state.steps;\r\n        var currentStep = this.props.currentStep;\r\n        const buttonStyle = { background: '#E0E0E0', width: 200, padding: 16, textAlign: 'center', margin: '0 auto', marginTop: 32 };\r\n\r\n  \r\n\r\n\r\n        return (\r\n            <div className=\"Admin\">\r\n                \r\n               \r\n              \r\n                <div style={{ display: 'flex', justifyContent: 'center' }}>\r\n                    <Card style={{ width: '50rem' }}>\r\n                        <Card.Header><strong>Voting status</strong></Card.Header>\r\n                        <Card.Body>\r\n                            {/* <Stepper steps={steps} activeStep={currentStep} disabledSteps={[2]} /> */}\r\n                            <Stepper steps={steps} activeStep={currentStep}/>\r\n                            <div style={buttonStyle} onClick={this.onClickNext}>Next</div>\r\n                        </Card.Body>\r\n                    </Card>\r\n                </div>\r\n                <br></br>\r\n                <div style={{ display: 'flex', justifyContent: 'center' }}>\r\n                    <Card style={{ width: '50rem' }}>\r\n                        <Card.Header><strong>Autoriser un nouveau compte</strong></Card.Header>\r\n                        <Card.Body>\r\n                            <Form.Group controlId=\"formAddress\">\r\n                                <Form.Control type=\"text\" id=\"address\"\r\n                                    ref={(input) => { this.address = input }}\r\n                                />\r\n                            </Form.Group>\r\n                            <Button variant=\"dark\" onClick={this.onAuthorize}> Autoriser </Button>\r\n\r\n\r\n                        </Card.Body>\r\n                    </Card>\r\n                </div>\r\n                <br></br>\r\n                <div style={{ display: 'flex', justifyContent: 'center' }}>\r\n                    <Card style={{ width: '50rem' }}>\r\n                        <Card.Header><strong>Liste des comptes autorisés</strong></Card.Header>\r\n                        <Card.Body>\r\n                            <ListGroup variant=\"flush\">\r\n                                <ListGroup.Item>\r\n                                    <Table striped bordered hover>\r\n                                        <thead>\r\n                                            <tr>\r\n                                                <th>@</th>\r\n                                            </tr>\r\n                                        </thead>\r\n                                        <tbody>\r\n                                            {\r\n                                                this.props.whitelist !== null && this.props.whitelist.map((a) => <tr><td>{a}</td></tr>)\r\n                                            }\r\n                                        </tbody>\r\n                                    </Table>\r\n                                </ListGroup.Item>\r\n                            </ListGroup>\r\n                        </Card.Body>\r\n                    </Card>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Admin;\r\n","\r\nimport React, { Component } from \"react\";\r\n\r\n\r\nclass NewProposal extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = { value: '', hasError: false };\r\n\r\n\r\n        this.handleClick = this.handleClick.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n\r\n    componentDidMount = async () => {\r\n\r\n    };\r\n\r\n    // test error boundaries\r\n    // https://reactjs.org/blog/2017/07/26/error-handling-in-react-16.html\r\n    componentDidCatch(error, info) {\r\n        this.setState({ hasError: true });\r\n    }\r\n\r\n\r\n    handleChange(event) {\r\n        this.setState({ value: event.target.value });\r\n    }\r\n\r\n    handleClick(event) {\r\n        try {\r\n            this.props.onRegisterProposal(this.state.value);\r\n        }\r\n        catch (error)\r\n        {\r\n            console.log(\"ERROR IN REGISTERING A PROPOSAL 2\");\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        if (this.state.hasError) {\r\n            // You can render any custom fallback UI\r\n            return <h1>Something went wrong.</h1>;\r\n        }\r\n        else {\r\n            return (\r\n                <div class=\"card\">\r\n                    <div class=\"card-body\">\r\n                        <h4 class=\"card-title\">New proposal</h4>\r\n                        <div class=\"form-group\">\r\n                            {/* <label for=\"exampleFormControlTextarea1\">Title</label> */}\r\n                            {/* <textarea class=\"form-control\" id=\"exampleFormControlTextarea1\" rows=\"1\"></textarea> */}\r\n\r\n                            {/* <label for=\"exampleFormControlTextarea2\">Proposal</label> */}\r\n                            {/* <textarea  ref={(input) => { this.proposalContent = input }} class=\"form-control\" id=\"exampleFormControlTextarea2\" rows=\"10\"></textarea> */}\r\n                            <textarea value={this.state.value} onChange={this.handleChange} class=\"form-control\" id=\"exampleFormControlTextarea2\" rows=\"10\"></textarea>\r\n                        </div>\r\n                        <button onClick={() => this.handleClick()} type=\"button\" class=\"btn btn-primary\">Save proposal</button>\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport default NewProposal;\r\n\r\n\r\n","\r\nimport React, { Component } from \"react\";\r\n\r\n\r\nclass DisplayProposal extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleClick = this.handleClick.bind(this);\r\n    }\r\n\r\n    componentDidMount = async () => {\r\n\r\n    };\r\n\r\n    handleClick() {\r\n        if (this.props.proposalId >= 0)\r\n        {\r\n            //console.log(this.props);\r\n            this.props.onVote(this.props.proposalId);\r\n        }\r\n       \r\n        //event.preventDefault();\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        var proposalTxt = '';\r\n        var proposalVoteCount = 0;\r\n        if ((this.props.proposalId >= 0) && (this.props.proposals[this.props.proposalId] != undefined))\r\n        {\r\n            proposalTxt = this.props.proposals[this.props.proposalId].description;\r\n            proposalVoteCount = this.props.proposals[this.props.proposalId].voteCount;\r\n        }\r\n        return (\r\n            <div>\r\n            <div class=\"card\">\r\n                <div class=\"card-body\">\r\n                    {/* <h4 class=\"card-title\">Proposal</h4> */}\r\n                    <p class=\"card-text\">{proposalTxt}</p>\r\n                  \r\n                  \r\n                </div>\r\n            </div>\r\n             <div class=\"card\">\r\n             <div class=\"card-body\">\r\n                 <p class=\"card-text\">{\"Vote count: \"+proposalVoteCount}</p>\r\n                 {/* <a href=\"#\" class=\"card-link\">Go to proposal</a> */}\r\n                 <button type=\"button\" onClick={() => this.handleClick()} class=\"btn btn-primary\">Vote</button>\r\n             </div>\r\n         </div>\r\n\r\n</div>\r\n\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default DisplayProposal;\r\n","\r\nimport React, { Component } from \"react\";\r\nimport Mainpage from \"./Mainpage\";\r\nimport Proposals from \"./Proposals\";\r\nimport Admin from \"./Admin\";\r\nimport NewProposal from \"./NewProposal\";\r\nimport DisplayProposal from \"./DisplayProposal\";\r\n\r\nclass MainpageSelector extends Component {\r\n\r\n\r\n\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.handleClick = this.handleClick.bind(this);\r\n    }\r\n\r\n    handleClick(linkNumber,propNumber) {\r\n        //e.preventDefault();\r\n       // console.log(linkNumber);\r\n        this.props.onPageChangedClicked(linkNumber,propNumber);\r\n    }\r\n   \r\n\r\n    componentDidMount = async () => {\r\n\r\n    };\r\n\r\n\r\n    render() {\r\n\r\n\r\n        if (this.props.curPage === 0) {\r\n           \r\n            return (\r\n                <Mainpage proposals = {this.props.proposals} connectStatus = {this.props.connectStatus} winningId = {this.props.winningId} currentStep  ={this.props.currentStep} />\r\n            );\r\n\r\n        }\r\n        else if (this.props.curPage === 1) {\r\n            return (\r\n                <Proposals proposals = {this.props.proposals} onPageChangedClicked={this.handleClick} />\r\n            );\r\n\r\n        }\r\n        else if (this.props.curPage === 2) {\r\n            return (\r\n                //<Admin whitelist={[\"0x97e7f9f6987D3b06E702642459F7C4097914Ea87\", \"0x1279a8132C775edE3e738cc2A753fFe47d009353\"]} />\r\n                <Admin  currentStep  ={this.props.currentStep} onNextStepButton = {this.props.onNextStep} onWhitelistButton = {this.props.onWhitelist} whitelist={this.props.whitelist} />\r\n            );\r\n\r\n        }\r\n        else if (this.props.curPage === 3) {\r\n            return (\r\n                <NewProposal onRegisterProposal = {this.props.onRegisterProposal}/>\r\n            );\r\n\r\n        }\r\n        else if (this.props.curPage === 4) {\r\n            return (\r\n                <DisplayProposal onVote = {this.props.onVote} proposals = {this.props.proposals} proposalId = {this.props.curProposal} />\r\n            );\r\n\r\n        }\r\n\r\n\r\n\r\n\r\n\r\n    }\r\n}\r\n\r\nexport default MainpageSelector;\r\n","\r\nimport React, { Component } from \"react\";\r\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\r\nimport Mainpage from './Mainpage';\r\nimport Menu from './Menu';\r\nimport NavbarSimple from './NavbarSimple';\r\nimport MainpageSelector from \"./MainpageSelector\";\r\nimport VotingContract from \"../contracts/Voting.json\";\r\nimport getWeb3Click from \"./getWeb3\";\r\n\r\nimport \"./votingappstyle.css\";\r\nclass Main extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        // current page in session state\r\n        var page = parseInt(localStorage.getItem('currentpage'));\r\n        console.log(\"page courante = \" + page);\r\n        if (page < 0)\r\n            page = 0;\r\n        if (page > 4)\r\n            page = 4;\r\n        if ((page === null) || (isNaN(page))) {\r\n            page = 0;\r\n        }\r\n        var proposal = parseInt(localStorage.getItem('currentproposal'));\r\n        if ((proposal === null) ||(isNaN(proposal))) \r\n        {\r\n            proposal = 0;\r\n        }\r\n\r\n        var connectstatus = parseInt(localStorage.getItem('connectstatus'));\r\n        if ((connectstatus != 1)&& (connectstatus != 2)) {\r\n            connectstatus = 0;\r\n        }\r\n\r\n\r\n        //console.log(proposal);\r\n        this.state = {\r\n            currentpage: page,\r\n            currentAccount: \"\",\r\n            currentAmount: \"\",\r\n            currentBlockchain: \"\",\r\n            connectStatus: connectstatus,\r\n            thewhitelist: [],\r\n            theproposals: [],\r\n            theweb3: null,\r\n            theaccounts: null,\r\n            thecontract: null,\r\n            currentStep: 0,\r\n            currentProposal: proposal,\r\n            winningId: -1\r\n        };\r\n\r\n        console.log(\"CONSTRUCTOR\");\r\n\r\n        this.runInit = this.runInit.bind(this);\r\n\r\n        this.accountChanged = this.accountChanged.bind(this);\r\n        this.loadWeb3 = this.loadWeb3.bind(this);\r\n\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n    reload() {\r\n        window.location.reload();\r\n\r\n\r\n    }\r\n\r\n    componentDidMount = async () => {\r\n        // automatic connect only if no previous error\r\n        console.log(\"connect status: \" + this.state.connectStatus);\r\n        //if (this.state.connectStatus === 0)\r\n            this.loadWeb3();\r\n\r\n        // // getter\r\n        // var page = localStorage.getItem('currentpage');\r\n        // if (page != null)\r\n        // {\r\n        //     console.log(\"********************* \"+page);\r\n        //     this.setState({ currentpage:page});\r\n        // }\r\n        // else\r\n        // {\r\n        //     console.log(\"+++++++++++++++++++++++++ \"+page);\r\n        // }\r\n\r\n\r\n    };\r\n\r\n    loadWeb3 = async () => {\r\n\r\n        console.log(\"running loadweb3\");\r\n\r\n        try {\r\n            // Get network provider and web3 instance.\r\n            const web3 = await getWeb3Click();\r\n            console.log(web3);\r\n\r\n            // Use web3 to get the user's accounts.\r\n            const accounts = await web3.eth.getAccounts();\r\n\r\n            if ((web3.currentProvider != null) && (web3.eth.net != null)) {\r\n                const networkId = await web3.eth.net.getId();\r\n\r\n                const deployedNetwork = VotingContract.networks[networkId];\r\n\r\n                if (deployedNetwork != null) {\r\n                    const instance = new web3.eth.Contract(\r\n                        VotingContract.abi,\r\n                        deployedNetwork && deployedNetwork.address,\r\n                    );\r\n\r\n                    const bal = await web3.eth.getBalance(accounts[0]);\r\n                    var chainname = \"undefined\";\r\n                    if (networkId === 1)\r\n                        chainname = \"mainnet\";\r\n                    if (networkId === 5777)\r\n                        chainname = \"ganache\";\r\n                    if (networkId === 42)\r\n                        chainname = \"kovan\";\r\n                    // TODO: others if necessayry (if deployed)\r\n                    var balEther = web3.utils.fromWei(bal, 'ether');\r\n\r\n                    // contract should be dployed here\r\n\r\n                    this.setState({\r\n                        currentAccount: accounts[0].toString(), currentAmount: balEther.toString(),\r\n                        currentBlockchain: chainname,\r\n                        connectStatus: 1, theweb3: web3, theaccounts: accounts, thecontract: instance\r\n                    }, this.runInit);\r\n\r\n                    console.log(\"contract found\");\r\n                }\r\n            }\r\n            else {\r\n                this.setState({\r\n                    currentAccount: accounts[0].toString(), currentAmount: balEther.toString(),\r\n                    currentBlockchain: chainname,\r\n                    connectStatus: 2, theweb3: web3, theaccounts: accounts, thecontract: null\r\n                });\r\n                console.log(\"contract not found\");\r\n            }\r\n\r\n\r\n            window.ethereum.on('accountsChanged', (accounts) => {\r\n                this.accountChanged(accounts);\r\n            });\r\n\r\n            window.ethereum.on('chainChanged', (chainId) => {\r\n                // Handle the new chain.\r\n                // Correctly handling chain changes can be complicated.\r\n                // We recommend reloading the page unless you have good reason not to.\r\n\r\n                this.reload();\r\n            });\r\n\r\n\r\n        }\r\n        catch (error) {\r\n            // Catch any errors for any of the above operations.\r\n            alert(\r\n                `Failed to load web3, accounts, or contract. Check console for details.`,\r\n            );\r\n            // this.setState({\r\n            //     currentAccount: null, currentAmount:\"0\",\r\n            //     currentBlockchain: \"\",\r\n            //     connectStatus: 2, theweb3: null, theaccounts: null, thecontract: null\r\n            // });\r\n            // invalid network status\r\n            localStorage.setItem('connectstatus', \"0\");\r\n            this.reload();\r\n\r\n            //this.reload();\r\n        }\r\n    };\r\n\r\n\r\n\r\n    async accountChanged(newaccounts) {\r\n        console.log('accountsChanges', newaccounts);\r\n        //this.setState({ accounts: newaccounts });\r\n        await this.loadWeb3();\r\n    }\r\n\r\n\r\n\r\n\r\n    runInit = async () => {\r\n\r\n        console.log(\"RUNNING INIT\");\r\n        const contract = this.state.thecontract;\r\n\r\n        if (contract != null) {\r\n            // récupérer la liste des comptes autorisés\r\n            const whitelist = await contract.methods.getAdresses().call();\r\n\r\n            // Mettre à jour le state \r\n\r\n            const status = await contract.methods.getStatus().call();\r\n\r\n\r\n\r\n\r\n            // proposals\r\n            const props = await contract.methods.getProposals().call();\r\n            // Mettre à jour le state \r\n            var theWinningId = 0;\r\n            var stepInt = parseInt(status, 10);\r\n            if (stepInt === 5)\r\n                theWinningId = await contract.methods.GetWinningProposalId().call();\r\n\r\n            this.setState({ currentStep: stepInt, theproposals: props, winningId: theWinningId, thewhitelist: whitelist });\r\n\r\n\r\n\r\n        }\r\n    };\r\n\r\n    //function registerProposal(string memory proposalDescription) public \r\n\r\n\r\n    registerProposalTransaction = async (proposalDescription) => {\r\n        const contract = this.state.thecontract;\r\n        const account = this.state.theaccounts[0];\r\n\r\n\r\n\r\n        try {\r\n\r\n            console.log(proposalDescription);\r\n\r\n            console.log(\"startProposalsRegistration\");\r\n            await contract.methods.registerProposal(proposalDescription).send({ from: account });\r\n\r\n            await this.runInit();\r\n\r\n            this.setState({ currentpage: 1 });\r\n            // setter\r\n            localStorage.setItem('currentpage', 1);\r\n\r\n        }\r\n        catch (error) {\r\n            console.log(\"ERROR IN REGISTERING A PROPOSAL\");\r\n            // rpc error for example\r\n            // reload everything \r\n            // console.log('before reload');\r\n            this.reload();\r\n            // console.log('after reload');\r\n            //await this.runInit();\r\n            // this.handleConnect();\r\n            // this.setState({currentpage: 0});\r\n            // console.log('after calling methods');\r\n\r\n\r\n        }\r\n\r\n        // another syntax\r\n\r\n\r\n\r\n        //         await this.runInit();\r\n\r\n        //         this.setState({currentpage: 1});\r\n\r\n\r\n        // contract.methods.registerProposal(proposalDescription).send({ from: account }).on(\"receipt\", (receipt) => {\r\n\r\n        //     // Transaction succeeded\r\n        //     // this.runInit();\r\n        //     // this.setState({currentpage: 1});\r\n        // }).catch(function (e) {\r\n        //     // Transaction rejected or failed\r\n        //     console.log(\"ERROR IN REGISTERING A PROPOSAL\");\r\n        //     console.log(e);\r\n        // });\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n    nextStepTransaction = async () => {\r\n        const contract = this.state.thecontract;\r\n        const account = this.state.theaccounts[0];\r\n\r\n        const isowner = await contract.methods.isOwner().call({ from: account });\r\n\r\n        var nextStep = this.state.currentStep + 1;\r\n\r\n        if (isowner) {\r\n            try {\r\n                console.log(\"ownership ok, try to change status\");\r\n                console.log(nextStep);\r\n                if (nextStep === 1) {\r\n                    console.log(\"startProposalsRegistration\");\r\n                    await contract.methods.startProposalsRegistration().send({ from: account });\r\n                }\r\n                else if (nextStep === 2) {\r\n                    await contract.methods.endProposalsRegistration().send({ from: account });\r\n\r\n                }\r\n                else if (nextStep === 3) {\r\n                    await contract.methods.startVotingSession().send({ from: account });\r\n\r\n                }\r\n                else if (nextStep === 4) {\r\n                    await contract.methods.endVotingSession().send({ from: account });\r\n\r\n                }\r\n                else if (nextStep === 5) {\r\n                    await contract.methods.CountVotes().send({ from: account });\r\n\r\n\r\n                }\r\n                await this.runInit();\r\n\r\n            }\r\n            catch (error) {\r\n\r\n                // rpc error for example\r\n                // reload everything \r\n                this.reload();\r\n            }\r\n        }\r\n        else {\r\n\r\n            console.log(\"not auhorized to this action\");\r\n        }\r\n\r\n    }\r\n    //function Vote(uint proposalId) public\r\n    VoteTransaction = async (proposalId) => {\r\n        const contract = this.state.thecontract;\r\n        const account = this.state.theaccounts[0];\r\n\r\n\r\n\r\n        try {\r\n\r\n\r\n            await contract.methods.Vote(proposalId).send({ from: account });\r\n\r\n            await this.runInit();\r\n\r\n        }\r\n        catch (error) {\r\n\r\n            // rpc error for example\r\n            // reload everything \r\n            this.reload();\r\n        }\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n    whitelist = async (addressFromForm) => {\r\n        const contract = this.state.thecontract;\r\n        const account = this.state.theaccounts[0];\r\n        const address = addressFromForm.value;\r\n\r\n        const isowner = await contract.methods.isOwner().call({ from: account });\r\n\r\n        if (isowner) {\r\n            try {\r\n                // Interaction avec le smart contract pour ajouter un compte \r\n                await contract.methods.register(address).send({ from: account });\r\n                // Récupérer la liste des comptes autorisés\r\n                this.runInit();\r\n            }\r\n            catch (error) {\r\n                // rpc error for example\r\n                // reload everything \r\n                this.reload();\r\n            }\r\n        }\r\n        else {\r\n            console.log(\"not auhorized to this action\")\r\n        }\r\n    }\r\n\r\n\r\n    handleLinkClicked = (linkNumber, proposalNumber) => {\r\n        this.setState({\r\n            currentpage: linkNumber,\r\n            currentProposal: proposalNumber\r\n        });\r\n        localStorage.setItem('currentpage', linkNumber);\r\n        localStorage.setItem('currentproposal', proposalNumber);\r\n    };\r\n\r\n\r\n    handleConnect = async () => {\r\n\r\n        await this.loadWeb3();\r\n\r\n    };\r\n\r\n    render() {\r\n\r\n\r\n\r\n        return (\r\n            <Router>\r\n                <div className=\"App\">\r\n                    <div class=\"container-fluid\">\r\n                        <div class=\"row flex-nowrap\">\r\n                            <div class=\"col bg-color1\"><NavbarSimple\r\n                                connectStatus={this.state.connectStatus}\r\n                                account={this.state.currentAccount}\r\n                                blockchain={this.state.currentBlockchain}\r\n                                amount={this.state.currentAmount}\r\n                                onConnect={this.handleConnect}></NavbarSimple></div>\r\n                        </div>\r\n\r\n                        <div class=\"row flex-nowrap\">\r\n                            {/* <div class=\"col-sm-3 bg-color2\">  */}\r\n                            <div class=\"col-auto col-md-3 col-xl-2 px-sm-2 px-0 bg-dark\">\r\n                                <Menu onLinkClicked={this.handleLinkClicked}></Menu>\r\n                            </div>\r\n                            <div class=\"col-sm-9 bg-color3\">\r\n                                <div class=\"container p-5 my-5\">\r\n                                    <MainpageSelector onRegisterProposal={this.registerProposalTransaction} currentStep={this.state.currentStep} onNextStep={this.nextStepTransaction} onWhitelist={this.whitelist}\r\n                                        whitelist={this.state.thewhitelist} onPageChangedClicked={this.handleLinkClicked} proposals={this.state.theproposals}\r\n                                        curPage={this.state.currentpage}\r\n                                        curProposal={this.state.currentProposal}\r\n                                        onVote={this.VoteTransaction}\r\n                                        connectStatus={this.state.connectStatus}\r\n                                        winningId={this.state.winningId}\r\n                                    >\r\n                                    </MainpageSelector>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n\r\n\r\n                        {/* <NavbarSimple></NavbarSimple>\r\n                    <Menu onLinkClicked={this.handleLinkClicked}></Menu>\r\n                    <MainpageSelector onPageChangedClicked={this.handleLinkClicked} curPage = {this.state.currentpage}></MainpageSelector> */}\r\n                    </div>\r\n                </div>\r\n            </Router >\r\n        );\r\n    }\r\n}\r\n\r\nexport default Main;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport Main from './used/Main';\r\nimport * as serviceWorker from './serviceWorker';\r\n//import './index.css';\r\n//import \"./styles.css\";\r\n//ReactDOM.render(<App />, document.getElementById('root'));\r\n\r\nReactDOM.render(<Main />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}